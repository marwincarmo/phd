---
title: "Problem Set #1"
author: "INSERT YOUR NAME HERE"
date: "insert date here"
format: 
  pdf: 
    toc: true
    toc-depth: 2
    highlight-style: tango
    code-block-bg: "#DAECE4"
---

```{r package}
library(tidyverse)
```

# Overview:

In this problem set, you will be using the **ggpot2** package (part of tidyverse) to practice the basics of plotting. Unlike later homeworks, this is just a basic set of exercises, so you will not be asked use your own data (although you're welcome to if you'd really like to).

For demonstration, we'll use the `starwars` dataset from the `dplyr` package, which you will have access to after loading the `tidyverse` package.

```{r data}
data(starwars)
head(starwars)
```

# Question 1: `geom_point()`

1.  Plot the relationship between mass and height using `geom_point()`.

```{r q1.1}
# your code here
```

2.  What an outlier! Use the arrange() function to sort the data by mass (descending) to figure out what it is

```{r q1.2}
# your code here
```

3.  Now, plot the relationship between mass and height again, removing that outlier (hint: use filter).

```{r q1.3}
# your code here
```

4.  It's possible that different species in the starwars universe have different weight-height patterns. Let's test that by setting `color = species`.:

```{r q1.4}
# your code here
```

5.  Oops -- that's a lot of species, let's reduce that to humans, Droids, and Wookiees and collapse the others to "Other" (hint create a new variable with mutate; consider using `ifelse()`, `if_else()` or `case_when()`). Then replot. Once you're done, assign that plot to object `p1`. Remember that `ggplot` is a layered grammar of graphics, so assigning this plot to an object will let us layer additional things on top of this base plot.

```{r q1.5}
# your code here
```

# Question 2: `geom_smooth()`

Now that we've got our scatterplot, let's layer a line of best fit on top. We're going to test out different fits here. You can get a since of this by typing `?geom_smooth` in your console.

1.  First, let's test a linear fit between height and weight using `geom_smooth()`. To do this, you'll set `method = "lm"`:

```{r q2.1, warning=F}
# your code here
```

2.  Hmmm, that maybe isn't super linear. Let's test out a non-linear fit. To get a better sense of the general pattern, let's start with a loess line (hint: set `method = "loess"`):

```{r q2.2, warning=F}
# your code here
```

3.  That's not totally clear -- what about quadratic? We can change the formula that links x and y via the formula argument (`formula = y ~ x + I(x^2)`)

```{r q2.3, warning=F}
# your code here
```

4.  Let's try one more. Set the method to "gam":

```{r q2.4, warning=F}
# your code here
```

5.  Choose one of these and save it as object `p2`.

# Question 3: `geom_vline()` and `geom_hline()`:

Now, let's practice adding vertical and horizontal lines. Let's add a line at the mean of both height (vertical) and weight (horizontal) using `geom_vline()` and `geom_hline()`, respectively.

1.  Add a vertical line at the mean of height. Make it dashed and increase the thickness. Assign this to p3.

```{r q3.1, warning=F}
# your code here
```

2.  Add a horizontal line at the mean of weight Make it dashed and increase the thickness. Assign this to p4.

```{r q3.2}
# your code here
```

# Question 4: `geom_bar()`

But maybe we do actually just care about the means, so let's plot the mean and SDs of height and weight across species. Here's code to get the descriptives to help you get started:

```{r q4 data}
starwars2 <- starwars %>%
  mutate(species_cat = ifelse(species %in% c("Human", "Droid", "Wookiee"), species, "Other")) %>%
  filter(mass < 200) %>%
  select(name, height, mass, species_cat) %>%
  pivot_longer(
    cols = c(height, mass)
    , names_to = "measure"
    , values_to = "value"
  ) 

starwars_desc <- starwars2 %>%
  group_by(species_cat, measure) %>%
  summarize_at(vars(value), lst(mean, sd), na.rm = T) %>%
  ungroup()
starwars_desc
```

1.  Plot the mean of both height and mass using `geom_col()` or `geom_bar()`, splitting the two measures (height & weight using `facet_grid()`), filling by species and setting `color = "black`" to add an outline:

```{r q4.1}
# your code here
```

2.  Now add the SD using `geom_errorbar()`. Your key new arguments are `ymin = mean - sd` and `ymax = mean + sd` (hint: set the width to a smaller value to improve the aesthetic):

```{r q4.2}
# your code here
```

3.  Now let's re-add the raw data back in using geom_jitter() (jittering in the x direction only). Note the following hints:

-   You will need to use a different data set. You can do this by using the `data` argument within `geom_jitter()` (`data = starwars2`)
-   You want to jitter the x direction, not y, which you can do by setting `height = 0`
-   Don't forget to change the color by setting `color = species_cat`

```{r q4.3}
# your code here
```

4.  Hmm, we can't really see the points. We'll do three things here. We'll change the `shape`, change fill for color, set `color = "black"`, and adjust the alpha (transparency):

```{r q4.4}
# your code here
```

# Question 5: `geom_boxplot()` and `geom_density()`

Lastly, let's do some quick practice with distributions of data using `geom_density()` and `geom_boxplot()`.

1.  Make a boxplot of mass and height using `geom_boxplot()` and the `starwars2` dataset

-   hint:`y = species_cat` and `x = value`
-   Don't forget to use facet_grid again!
-   set `fill = species_cat`
-   remove the unnecessary legend using `theme(legend.position = "none")`

```{r q5.1}
# your code here
```

1.  Make a histogram of mass and height using `geom_histogram()` and the `starwars2` dataset

-   hint: `x = value`
-   Don't forget to use facet_grid again; this time, you also need to add species_cat to it!
-   set `fill = species_cat`
-   set `color = "black"`
-   remove the unnecessary legend using `theme(legend.position = "none")`

```{r q5.2}
# your code here
```

# Question 6: Aesthetics

Choose any plot above that has some sort of color or fill mapping to improve it's aesthetic appearance.

1.  **Axis labels**:
    -   Adjust the x and y labels using the `labs()` function.
    -   Modify their appearance using `theme(axis.text = element_text(face = "bold"), axis.title = element_text(face = "bold", size = rel(1.4))`
2.  **Plot title**:
    -   Add a plot title using the `labs()` function.
    -   Change the appearance of the title using `theme(plot.title = element_text())`
3.  **Legend**:
    -   Redundant legend? Remove it
    -   Side legend? Move it to the bottom
    -   Weird title for the legend? Adjust it by updating the title for the relevant aesthetic in `labs()`
4.  Facets:
    -   Weird facet range for one panel? Play around with setting the argument `scale` to `"free"`, `"free_x"`, and `"free_y"`.
    -   Change their appearance using theme. Try `theme(strip.background = element_rect(fill = "black"))` to set the background color. Then change the font color and appearance using `strip.text = element_text(color = "white", face = "bold")`

```{r q6.1}
# your code here
```

# Render to html and submit problem set

**Render to html** by clicking the "Render" button near the top of your RStudio window (icon with blue arrow)

-   Go to the Canvas --\> Assignments --\> Problem Set 1
-   Submit both .qmd and .html files\
-   Use this naming convention "lastname_firstname_ps#" for your .qmd and html files (e.g. beck_emorie_ps1.qmd & beck_emorie_ps1.html)
