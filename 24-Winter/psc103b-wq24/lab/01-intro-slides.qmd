---
title: "Week 1 - R recap & Quarto"
author: "Marwin Carmo"
format: 
  revealjs:
    #chalkboard: true
    incremental: true
    code-tools: true
    code-copy: true
    code-line-numbers: true
    code-link: true
    preview-links: true
    slide-number: true
    self-contained: true
    fig-height: 4
    fig-width: 6
    fig-align: center
    #css: custom.css
    #theme: psc290-23
    # highlight-style: atom-one-dark
    margin-left: "0"
    margin-right: "0"
    width: 1400
    # height: 900
    footer: "PSC 103B - Statistical Analysis of Psychological Data"
    logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
editor: visual
editor_options: 
  chunk_output_type: console
---

## Who am I

- 1st Year Graduate Student in Quantitative Psychology

- MSc in Psychiatry at University of Sao Paulo, Brazil

- Advised by Dr. Philippe Rast

- Studying intraindividual variability

## More info

# R Basics

## The RStudio environment

## R as a calculator

### Common mathematic operations in R:

- `+` :      addition
- `-` :      subtraction
- `/` :      division
- `*` :      multiplication
- `^` :      exponent
- `sqrt()` : square root
- `exp()` :  exponential function


## R as a calculator

::: fragment
```{r, echo = T}
2 + 2

3 - 1

2 * 6

4 / 2

sqrt(16)
```
:::

## R as a calculator

- To run a line of code just use CTRL + ENTER (that's COMMAND + ENTER if you're on a Mac)

- How would I ask R to divide 10 by 2? 

::: fragment
```{r, echo = T}
10 / 2
```
:::

- How would I ask R to calculate 5 to the 4th power? 

::: fragment
```{r, echo = T}
5^4
```
:::

## R as a calculator

The R Calculator follows the PEMDAS rule:

Parentheseis, exponents, multiplication, division, addition, subraction from left to right

::: fragment
```{r, echo = T}
3 + 4 * 12
```
:::

::: fragment
```{r, echo = T}
(3 + 4) * 12
```
:::

## Commenting

- Anything that you type after the "#" will be disregarded by R
- You can make notes to yourself and it will not interfere with your code

::: fragment
```{r, echo = T}
# This is a comment to my code
1 + 1
```
:::

## Creating Objects

- We use objects to store any kind of information in R
- Think of an object as a label for a piece of information
- We can save information as variables by using the assignment operator: `<-` or `=`
- General pattern:
  - `a <- 2 + 2`

::: fragment
```{r, echo = T}
a <- 2 + 2
```
:::

- Now we can access this piece of information by 'calling' `a`

::: fragment
```{r, echo = T}
a 
```
:::

## Creating Objects

- R is case sensitive 

::: fragment
```{r, echo = T, eval=FALSE}
A
# Error: object 'A' not found
```
:::

- Objects can be overwritten

::: fragment
```{r, echo = T}
a <- 3
a
```
:::

## Labeling conventions

:::: {.columns}

::: {.column width="50%"}
Bad

`1a <- 3`

`!a <- 3`

`a! <- 3`
:::

::: {.column width="50%"}
Better

`a1 <- 3`

`a_object <- 3`

`a.object <- 3`

`aObject <- 3`
:::

::::

## Data Types

### Numeric

```{r, echo = T}
my_number <- 13
class(18)
class(my_number)
is.numeric(my_number)
```

