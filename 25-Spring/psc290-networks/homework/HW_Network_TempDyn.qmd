---
title: "HW: Temporal and Dynamic Networks"
author: "Marwin Carmo"
format: pdf
editor: visual
---

# Introduction

Welcome to the Homework Assignment for Temporal and Dynamic Networks! For this week's assignment, you'll find the dataset's `.RDS` file on Canvas.

## Instructions

-   Download the dataset from Canvas as a `.RDS` file
-   Load that `.RDS` file into your `R` environment and begin the assignment
    -   This can be done with the command, \`readRDS()\`\`

Below, you will find a template of the questions and fields to provide answers in either `R` or text format. Please use a mix of code and text to answer each question.

```{r}
library(sna)
library(tsna)
library(ndtv)
library(OpenMx)
```

## Questions

### ***Question 1***. Read in your temporal network via the `.RDS` file. Pick a random node and visualize its forward path.

#### Answer

```{r}
df <- readRDS("hwdf.RDS")

n_nodes = max(c(df$tail, df$head))
  base_net = network.initialize(n_nodes, directed = FALSE)
# The dataframe should be turned into a Temporal Network:
net_dyn = networkDynamic(
  base.net = base_net,
  edge.spells = df[, c("onset", "terminus", "tail", "head")]
  )

vpath = tPath(net_dyn,v = 13, direction = "fwd")
print(vpath)
```


### ***Question 2***. Plot your temporal network's density over time.

#### Answer

```{r}
  dynamicdensity = tSnaStats(
    net_dyn,
    snafun = "gden",
    start = 1,
    end = 300,
    time.interval = 1,
    aggregate.dur = 10
  )
  plot(dynamicdensity)
```


### ***Question 3***. Using OpenMx, simulate a stationary three variable system that evolves over 2000 time points. Define the $3\times 3$ transition matrix using the following values (but make sure the time series are stationary by plotting them):

$$
\mathbf{A}_{mat} = 
\begin{bmatrix}
  0.58 & 0.00 & -0.31 \\
  0.27 & 0.65 & 0.00 \\
  0.00 & 0.20 & 0.62
\end{bmatrix}
$$

#### Answer

```{r}
ne = 3
  VAR.params = matrix(c(0.58, 0.27, 0.00,
                        0.00, 0.65, 0.25,
                        -0.31, 0.00, 0.62), ne, ne)
  amat = mxMatrix('Full', ne, ne, TRUE, VAR.params, name = 'A')
  bmat = mxMatrix('Zero', ne, ne, name='B')
  cdim = list(paste0("V", 1:ne), paste0('F', 1:ne))
  cmat = mxMatrix('Diag', ne, ne, FALSE, 1, name = 'C', dimnames = cdim)
  dmat = mxMatrix('Zero', ne, ne, name='D')
  qmat = mxMatrix('Symm', ne, ne, FALSE, diag(ne), name='Q', lbound=0)
  rmat = mxMatrix('Symm', ne, ne, FALSE, diag(1e-5, ne), name='R')
  xmat = mxMatrix('Full', ne, 1, FALSE, 0, name='x0', lbound=-10, ubound=10)
  pmat = mxMatrix('Diag', ne, ne, FALSE, 1, name='P0')
  umat = mxMatrix('Zero', ne, 1, name='u')
  osc = mxModel("OUMod", amat, bmat, cmat, dmat, qmat, rmat, xmat, pmat, umat,
                mxExpectationStateSpace('A', 'B', 'C', 'D', 'Q',
                                        'R', 'x0', 'P0', 'u'))
  sim.data = mxGenerateData(osc, nrows = 2000)
```


### ***Question 4***. Fit a discrete time VAR to the simulated data and print the parameter values. Comment on the recovery, i.e., did the VAR do a good job at estimating the parameters?

#### Answer

### ***Question 5***. Now fit a continuous time VAR to the same data. Convert the drift matrix to its discrete time counterpart. Comment on the recovery.

#### Answer
